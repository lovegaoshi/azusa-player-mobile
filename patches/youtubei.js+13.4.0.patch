diff --git a/node_modules/youtubei.js/dist/src/core/Player.js b/node_modules/youtubei.js/dist/src/core/Player.js
index 4008af9..3aeeeb4 100644
--- a/node_modules/youtubei.js/dist/src/core/Player.js
+++ b/node_modules/youtubei.js/dist/src/core/Player.js
@@ -25,15 +25,14 @@ export default class Player {
         if (!player_id)
             throw new PlayerError('Failed to get player id');
         // We have the player id, now we can check if we have a cached player.
-        if (cache) {
-            const cached_player = await Player.fromCache(cache, player_id);
-            if (cached_player) {
-                Log.info(TAG, 'Found up-to-date player data in cache.');
-                cached_player.po_token = po_token;
-                return cached_player;
-            }
+        const cached_player = await Player.fromCache(cache, player_id);
+        if (cached_player) {
+            Log.info(TAG, 'Found up-to-date player data in cache.');
+            cached_player.po_token = po_token;
+            return cached_player;
         }
         const player_url = new URL(`/s/player/${player_id}/player_ias.vflset/en_US/base.js`, Constants.URLS.YT_BASE);
+        this.player_url = player_url;
         Log.info(TAG, `Could not find any cached player. Will download a new player from ${player_url}.`);
         const player_res = await fetch(player_url, {
             headers: {
@@ -129,7 +128,24 @@ export default class Player {
         return url_components.toString();
     }
     static async fromCache(cache, player_id) {
-        const buffer = await cache.get(player_id);
+      try {
+        console.log(`[fakeMMKV] attempts to load from gh: ${player_id}`);
+        const getCachedPlayer = async () => {
+            // attempt to load from github first
+            const req = await fetch(`https://raw.githubusercontent.com/lovegaoshi/my-express-api/refs/heads/ghactions/cachedPlayers/${player_id}`);
+            if (req.ok) return req.arrayBuffer();
+            // resort to the latest cached by github instead. 
+            const latestGHCacheReq = await fetch('https://raw.githubusercontent.com/lovegaoshi/my-express-api/refs/heads/ghactions/cachedPlayers/latest');
+            const ghCache = await latestGHCacheReq.text();
+            console.log(`[fakeMMKV] attempts to load from gh latest instead: ${ghCache}`);
+            const reqGH = await fetch(`https://raw.githubusercontent.com/lovegaoshi/my-express-api/refs/heads/ghactions/cachedPlayers/${ghCache}`);
+            if (reqGH.ok) return reqGH.arrayBuffer();
+            // old implementation that uses netlify to resolve on the fly. ~5s delay
+            const req2 = await fetch(`https://ytb-cache.netlify.app/api?playerURL=${player_id}`);
+            if (req2.ok) return req2.arrayBuffer();
+            return cache.get(player_id);
+        }
+        const buffer = await getCachedPlayer();
         if (!buffer)
             return null;
         const view = new DataView(buffer);
@@ -143,6 +159,10 @@ export default class Player {
         const sig_sc = LZW.decompress(new TextDecoder().decode(sig_buf));
         const nsig_sc = LZW.decompress(new TextDecoder().decode(nsig_buf));
         return new Player(player_id, sig_timestamp, sig_sc, nsig_sc);
+      } catch {
+        console.log('[fakeMMKV] failed to load from cache');
+        return null;
+      }
     }
     static async fromSource(player_id, sig_timestamp, cache, sig_sc, nsig_sc) {
         const player = new Player(player_id, sig_timestamp, sig_sc, nsig_sc);
diff --git a/node_modules/youtubei.js/dist/src/core/Session.js b/node_modules/youtubei.js/dist/src/core/Session.js
index 4d88803..43a2b47 100644
--- a/node_modules/youtubei.js/dist/src/core/Session.js
+++ b/node_modules/youtubei.js/dist/src/core/Session.js
@@ -118,7 +118,7 @@ class Session extends EventEmitter {
                 user_agent: user_agent,
                 visitor_data: visitor_data || ProtoUtils.encodeVisitorData(generateRandomString(11), Math.floor(Date.now() / 1000)),
                 client_name: client_name,
-                client_version: Constants.CLIENTS.WEB.VERSION,
+                client_version: Object.values(Constants.CLIENTS).filter(v => v.NAME === client_name)[0]?.VERSION ?? Constants.CLIENTS.WEB.VERSION,
                 device_category: device_category.toUpperCase(),
                 os_name: 'Windows',
                 os_version: '10.0',
diff --git a/node_modules/youtubei.js/dist/src/parser/classes/Video2.js b/node_modules/youtubei.js/dist/src/parser/classes/Video2.js
new file mode 100644
index 0000000..ed833a8
--- /dev/null
+++ b/node_modules/youtubei.js/dist/src/parser/classes/Video2.js
@@ -0,0 +1,105 @@
+import { timeToSeconds } from '../../utils/Utils.js';
+import { YTNode } from '../helpers.js';
+import { Parser } from '../index.js';
+import ExpandableMetadata from './ExpandableMetadata.js';
+import MetadataBadge from './MetadataBadge.js';
+import NavigationEndpoint from './NavigationEndpoint.js';
+import ThumbnailOverlayTimeStatus from './ThumbnailOverlayTimeStatus.js';
+import Menu from './menus/Menu.js';
+import Author from './misc/Author.js';
+import Text from './misc/Text.js';
+import Thumbnail from './misc/Thumbnail.js';
+class Video extends YTNode {
+    constructor(data) {
+        super();
+        this.title = new Text(data.title);
+        this.video_id = data.videoId;
+        this.expandable_metadata = Parser.parseItem(data.expandableMetadata, ExpandableMetadata);
+        if ('untranslatedTitle' in data)
+            this.untranslated_title = new Text(data.untranslatedTitle);
+        if ('descriptionSnippet' in data)
+            this.description_snippet = new Text(data.descriptionSnippet);
+        if ('detailedMetadataSnippets' in data) {
+            this.snippets = data.detailedMetadataSnippets.map((snippet) => ({
+                text: new Text(snippet.snippetText),
+                hover_text: new Text(snippet.snippetHoverText)
+            }));
+        }
+        if ('additionalMetadatas' in data)
+            this.additional_metadatas = data.additionalMetadatas.map((meta) => new Text(meta));
+        this.thumbnails = Thumbnail.fromResponse(data.thumbnail);
+        this.thumbnail_overlays = Parser.parseArray(data.thumbnailOverlays);
+        if ('richThumbnail' in data)
+            this.rich_thumbnail = Parser.parseItem(data.richThumbnail);
+        this.author = new Author(data.ownerText, data.ownerBadges, data.channelThumbnailSupportedRenderers?.channelThumbnailWithLinkRenderer?.thumbnail);
+        this.badges = Parser.parseArray(data.badges, MetadataBadge);
+        if ('navigationEndpoint' in data)
+            this.endpoint = new NavigationEndpoint(data.navigationEndpoint);
+        if ('publishedTimeText' in data)
+            this.published = new Text(data.publishedTimeText);
+        if ('viewCountText' in data)
+            this.view_count = new Text(data.viewCountText);
+        if ('shortViewCountText' in data)
+            this.short_view_count = new Text(data.shortViewCountText);
+        if ('upcomingEventData' in data)
+            this.upcoming = new Date(Number(`${data.upcomingEventData.startTime}000`));
+        this.show_action_menu = !!data.showActionMenu;
+        this.is_watched = !!data.isWatched;
+        this.menu = Parser.parseItem(data.menu, Menu);
+        if ('searchVideoResultEntityKey' in data)
+            this.search_video_result_entity_key = data.searchVideoResultEntityKey;
+        if ('bylineText' in data)
+            this.byline_text = new Text(data.bylineText);
+        if ('lengthText' in data)
+            this.length_text = new Text(data.lengthText);
+        if ('serviceEndpoints' in data)
+            this.service_endpoints = data.serviceEndpoints.map((endpoint) => new NavigationEndpoint(endpoint));
+        if ('serviceEndpoint' in data)
+            this.service_endpoint = new NavigationEndpoint(data.serviceEndpoint);
+        if ('style' in data)
+            this.style = data.style;
+    }
+    /**
+     * @deprecated Use {@linkcode video_id} instead.
+     */
+    get id() {
+        return this.video_id;
+    }
+    get description() {
+        if (this.snippets)
+            return this.snippets.map((snip) => snip.text.toString()).join('');
+        return this.description_snippet?.toString() || '';
+    }
+    get is_live() {
+        return this.badges.some((badge) => {
+            if (badge.style === 'BADGE_STYLE_TYPE_LIVE_NOW' || badge.label === 'LIVE')
+                return true;
+        }) || this.thumbnail_overlays.firstOfType(ThumbnailOverlayTimeStatus)?.style === 'LIVE';
+    }
+    get is_upcoming() {
+        return this.upcoming && this.upcoming > new Date();
+    }
+    get is_premiere() {
+        return this.badges.some((badge) => badge.label === 'PREMIERE');
+    }
+    get is_4k() {
+        return this.badges.some((badge) => badge.label === '4K');
+    }
+    get has_captions() {
+        return this.badges.some((badge) => badge.label === 'CC');
+    }
+    get best_thumbnail() {
+        return this.thumbnails[0];
+    }
+    get duration() {
+        const overlay_time_status = this.thumbnail_overlays.firstOfType(ThumbnailOverlayTimeStatus);
+        const length_text = this.length_text?.toString() || overlay_time_status?.text.toString();
+        return {
+            text: length_text,
+            seconds: length_text ? timeToSeconds(length_text) : 0
+        };
+    }
+}
+Video.type = 'Video';
+export default Video;
+//# sourceMappingURL=Video.js.map
\ No newline at end of file
diff --git a/node_modules/youtubei.js/dist/src/parser/classes/VideoCard.js b/node_modules/youtubei.js/dist/src/parser/classes/VideoCard.js
index 143508c..ee4e444 100644
--- a/node_modules/youtubei.js/dist/src/parser/classes/VideoCard.js
+++ b/node_modules/youtubei.js/dist/src/parser/classes/VideoCard.js
@@ -1,6 +1,6 @@
 import Author from './misc/Author.js';
 import Text from './misc/Text.js';
-import Video from './Video.js';
+import Video from './Video2.js';
 class VideoCard extends Video {
     constructor(data) {
         super(data);
diff --git a/node_modules/youtubei.js/dist/src/platform/react-native.js b/node_modules/youtubei.js/dist/src/platform/react-native.js
index 6542624..78cda7c 100644
--- a/node_modules/youtubei.js/dist/src/platform/react-native.js
+++ b/node_modules/youtubei.js/dist/src/platform/react-native.js
@@ -2,7 +2,7 @@ var _Cache_instances, _Cache_persistent_directory, _Cache_persistent, _Cache_get
 import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
 import { Platform } from '../utils/Utils.js';
 import sha1Hash from './polyfills/web-crypto.js';
-import package_json from '../../package.json' assert { type: 'json' };
+import package_json from '../../package.json' with { type: 'json' };
 import evaluate from './jsruntime/jinter.js';
 class Cache {
     constructor(persistent = false, persistent_directory) {
diff --git a/node_modules/youtubei.js/index.js b/node_modules/youtubei.js/index.js
new file mode 100644
index 0000000..02925cf
--- /dev/null
+++ b/node_modules/youtubei.js/index.js
@@ -0,0 +1 @@
+export * from './bundle/react-native'
\ No newline at end of file
